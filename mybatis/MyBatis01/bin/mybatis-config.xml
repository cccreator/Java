<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 
		1.properties: Mybatis可以是用properties来引入外部properties类型的文件.
			resource: 引入类路径下的资源
			url: 引入网络路径或者是磁盘路径下的资源
	 -->
	<properties resource="db.properties" ></properties>
	
	
	<!-- 
		2.settings: 包含了很多重要的设置项
			setting: 用来设置每一个设置项
				name:设置项的名称
				value:设置项的值
	 -->
	 <settings>
	 	<!-- 自动映射下划线到驼峰命名    DB: last_name  autoMapping  lastName -->
	 	<setting name="mapUnderscoreToCamelCase" value="true"/>
	 </settings>
	 
	 <!-- 
	 	3.typeAliases:别名处理,为java 类型注册别名
	 		typeAlias: 为某个java类指定别名
	 			type: 指定java的类型（包名+ 类名）
	 			alias: 指定具体的别名。 如果alias不显示的指定，则默认的别名是类名的首字母小写. 
	 				      别名不区分大小写。
	 		package: 批量取别名.
	 			 name：指定包名。   为该包下的所有的类取默认的别名。
	 			 批量取别名可能会出现别名冲突的情况. 例如指定的包下与子包下有相同的类.
	 			 可以使用@Alias("别名")在类上标注具体的别名.
	  -->
	  <typeAliases>
	  	
	  	<package name="com.atguigu.mybatis.beans"/>
	  	<!-- <typeAlias type="com.atguigu.mybatis.beans.Employee" alias="emp" /> -->
	  </typeAliases>
	 
	 <!--
		4.environments: 环境们。  使用default来指定具体使用的环境.
			 environment:配置具体的环境.
			 	id: 当前环境的标识
			 	transactionManager:事务管理器
			 		type: 配置具体的事务管理器的类型
			 			JDBC: JdbcTransactionFactory
			 			MANAGED:ManagedTransactionFactory			
			 	最终: 事务管理要交给Spring. 使用Spring的声明式事务.		 	
			 	dataSource:数据源
			 		type: 执行数据源的类型.
			 			UNPOOLED:不是用连接池 UnpooledDataSourceFactory
			 			POOLED:使用连接池  PooledDataSourceFactory
			 			JNDI:从web服务器中获取数据源.  JndiDataSourceFactory			 
			 	最终: 数据源交给Spring管理
	  -->
	<environments default="mysql">
		<environment id="mysql">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
		
		<environment id="oracle">
			<transactionManager type="JDBC"></transactionManager>
			<dataSource type="POOLED">
				<property name="driver" value="${orcl.driver}" />
				<property name="url" value="${orcl.url}" />
				<property name="username" value="${orcl.username}" />
				<property name="password" value="${orcl.password}" />
			</dataSource>
		</environment>
	</environments>
	
	<!-- 
		5.databaseIdProvider:
			Mybatis用来支持多数据库厂商。Mybatis可以根据不同的数据库执行不同的sql语句
			DB_VENDOR: VendorDatabaseIdProvider 作用就是得到数据库厂商的标识名.
					   Connection.getMetaData().getDataBaseProductName();	
			常见的数据库厂商的标识名:
				MySQL:  MySQL
				Oracle: Oracle
				SQL Server:  SQL Server		
	 --> 
	 <databaseIdProvider type="DB_VENDOR">
	 	<!-- 为数据库厂商的标识名起别名 -->
	 	<property name="MySQL" value="mysql"/>
	 	<property name="Oracle" value="oracle"/>
	 	<property name="SQL Server" value="sqlserver"/>
	 </databaseIdProvider>
	
	
	<!-- 
		6.mappers: 引入sql映射文件
			mapper: 引入单个的sql映射文件
				resource: 引入类路径下的sql映射文件
				url:引入网络路径或者是磁盘路径下的sql映射文件.
		    package: 批量引入sql映射文件
		    		 要求: 
		    		   1.sql映射文件的名字与 Mapper接口的名字一致.
		    		   2.Sql映射文件与Mapper接口必须在同一目录下.
		    	name:指定包名	    		 
 	 -->
	<mappers>
		<!-- <mapper resource="mybatis/config/EmployeeMapper.xml"/> -->
		<package name="com.atguigu.mybatis.dao"/>
	</mappers>
	
</configuration>